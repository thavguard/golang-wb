package conparams

import (
	"flag"
	"fmt"
)

// Необходимо поддерживать следующие флаги:

// -A N — после каждой найденной строки дополнительно вывести N строк после неё (контекст).

// -B N — вывести N строк до каждой найденной строки.

// -C N — вывести N строк контекста вокруг найденной строки (включает и до, и после; эквивалентно -A N -B N).

// -c — выводить только то количество строк, что совпадающих с шаблоном (т.е. вместо самих строк — число).

// -i — игнорировать регистр.

// -v — инвертировать фильтр: выводить строки, не содержащие шаблон.

// -F — воспринимать шаблон как фиксированную строку, а не регулярное выражение (т.е. выполнять точное совпадение подстроки).

// -n — выводить номер строки перед каждой найденной строкой.

type Params struct {
	A       int
	B       int
	C       int
	Count   bool
	I       bool
	V       bool
	F       bool
	N       bool
	Pattern string
}

func NewParams() *Params {
	var aFlag = flag.Int("A", 0, "после каждой найденной строки дополнительно вывести N строк после неё (контекст).")
	var bFlag = flag.Int("B", 0, "вывести N строк до каждой найденной строки.")
	var cFlag = flag.Int("C", 0, "вывести N строк контекста вокруг найденной строки (включает и до, и после; эквивалентно -A N -B N).")
	var countFlag = flag.Bool("c", false, "выводить только то количество строк, что совпадающих с шаблоном (т.е. вместо самих строк — число).")
	var iFlag = flag.Bool("i", false, "игнорировать регистр.")
	var vFlag = flag.Bool("v", false, "инвертировать фильтр: выводить строки, не содержащие шаблон.")
	var fFlag = flag.Bool("f", false, "воспринимать шаблон как фиксированную строку, а не регулярное выражение (т.е. выполнять точное совпадение подстроки).")
	var nFlag = flag.Bool("n", false, "выводить номер строки перед каждой найденной строкой.")

	flag.Parse()

	pattern := flag.Arg(0)

	args := flag.Args()

	fmt.Printf("args: %v\n", args)

	fmt.Printf("pattern: %v\n", pattern)

	fmt.Printf("iFlag: %v\n", *iFlag)

	myParams := &Params{
		A:       *aFlag,
		B:       *bFlag,
		C:       *cFlag,
		Count:   *countFlag,
		I:       *iFlag,
		V:       *vFlag,
		F:       *fFlag,
		N:       *nFlag,
		Pattern: pattern,
	}

	return myParams
}
