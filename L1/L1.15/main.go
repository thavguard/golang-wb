package main

import (
	"fmt"
	"sync"
)

// Ответы на вопросы:

// к каким негативным последствиям он (исходный код) может привести и как это исправить?
// -
// В исходном варианте мы создаем срез исходной большой строки, который ссылается
// на исходную строку - тем самым не позволяя исходной строке очиститься из памяти,
// что приводит к утечкам памяти;
// Также мы создаем срез, указывая диапазон 0:100 БАЙТ, и если мы хотели просто взять первые 100 символов,
// это не сработает для слов, буквы которых кодируются больше чем 1 байтом.
// Нужно использовать срез рун;
// Также дополнительно сделал нашу глобальную строку потокобезопастной;

// что происходит с переменной justString?
// -
// justString (в исходном варианте) хранит в себе ссылку на срез байтов исходной строки, что приводит сразу
// в двум проблемам, которые я описал выше.

// ИСПРАВЛЕННЫЙ ВАРИАНТ
type justString struct {
	mx sync.Mutex
	s  string
}

func (j *justString) someFunc() {
	j.mx.Lock()
	defer j.mx.Unlock()

	v := createHugeString()

	// Или Clone чтобы не сохранять ссылку на большую исходную строку
	j.s = string([]rune(v)[:3]) // Используем срез рун для корректного захвата N символов из строки

}

// Other
func createHugeString() string {
	return "123456789HEYHEYHEYJJJJ"
}

func NewJustString() *justString {
	return &justString{s: "HEY"}
}

func main() {
	j := NewJustString()

	fmt.Printf("AFTER: %v\n", j.s)

	j.someFunc()

	fmt.Printf("BEFORE: %v\n", j.s)
}
